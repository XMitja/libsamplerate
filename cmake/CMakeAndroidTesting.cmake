# Build the test suite for Android libsamplerate
# 2023, Sylvain Carette, based on the original CMakeLists.txt from libsamplerate

# Initial set up

cmake_minimum_required (VERSION 3.6)

# Do not run this script if using MSVC compiler
if (CMAKE_SYSTEM_NAME STREQUAL "Android" AND MSVC)
    message(FATAL_ERROR "Error: Must use Clang to compile for Android, not MSVC.")
endif()

# Locate config.h
set(CONFIG_H_FILE "${CMAKE_CURRENT_BINARY_DIR}/src/config.h")

check_include_file(sys/times.h HAVE_SYS_TIMES_H)

check_function_exists(alarm HAVE_ALARM)
check_function_exists(signal HAVE_SIGNAL)

check_symbol_exists(SIGALRM signal.h HAVE_SIGALRM)

if((NOT VCPKG_TOOLCHAIN) AND PKG_CONFIG_FOUND AND (NOT CMAKE_VERSION VERSION_LESS 3.6))
  pkg_check_modules(FFTW3 fftw3 IMPORTED_TARGET)
  if(FFTW3_FOUND)
    add_library(FFTW3::fftw3 INTERFACE IMPORTED)
    target_link_libraries(FFTW3::fftw3 INTERFACE PkgConfig::FFTW3)
  endif()
else()
  find_package(FFTW3)
endif()

set(HAVE_FFTW3 ${FFTW3_FOUND})


if(TARGET PkgConfig::SndFile)
  # We need this to get all the variables we need
  find_package(SndFile REQUIRED)
  # Reset this variable to point to the new target set by FindSndFile
  set(SNDFILE_TARGET SndFile::sndfile)
endif()

# This is only needed because we use a build of libsndfile with xiph libs and added mpeg support
# so we need to add those if libsndfile is static otherwise it won't build
# As a temporary measure, we use libsndfile own cmake FindXXX modules for the search
list(APPEND CMAKE_MODULE_PATH "$ENV{SNDFILE_ROOT_PATH}/cmake")
find_package(mpg123 REQUIRED)
find_package(mp3lame REQUIRED)
set_property(TARGET SndFile::sndfile APPEND PROPERTY INTERFACE_LINK_LIBRARIES MPG123::libmpg123 ${MP3LAME_LIBRARY})


# Set the archive name
if(NOT ARCHIVE_NAME)
    set(ARCHIVE_NAME "libsamplerate-testsuite-${TARGET_ARCHITECTURE}")
endif()

# Set the benchmark archive name
if(NOT BENCHMARK_ARCHIVE_NAME)
    set(BENCHMARK_ARCHIVE_NAME "libsamplerate-benchmark-${TARGET_ARCHITECTURE}")
endif()


# Create the first content segment for test_wrapper file
set(TEST_WRAPPER_CONTENT "#!/system/bin/sh

# Build the test suite for Android libsamplerate
# 2023, Sylvain Carette, based on the original CMakeLists.txt from libsamplerate
# This file is generated by CMake
# Copyright (C) 2008-2017 Erik de Castro Lopo <erikd@mega-nerd.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#     * Neither the author nor the names of any contributors may be used
#       to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# Set target device library path
export LD_LIBRARY_PATH=\$(pwd)/lib:$LD_LIBRARY_PATH

echo \"Starting tests...\"

# Force exit on errors.
set -e

") # End first segment TEST_WRAPPER_CONTENT


# Create the command script file
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "${TEST_WRAPPER_CONTENT}")

# Macro to add test to the command script
macro(add_android_test test_name)
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "./tests/${test_name}\n")
endmacro(add_android_test)

# Macro to add test with arguments to the command script
macro(add_android_test_args test_name args)
	file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/test_wrapper.sh "./tests/${test_name} ${args}\n")
endmacro(add_android_test_args)


# Here we continue with almost as in the original libsamplerate CMakeLists.txt

add_executable(misc_test tests/misc_test.c tests/util.c tests/util.h)
target_link_libraries(misc_test PRIVATE samplerate)
add_android_test(misc_test)


add_executable(termination_test tests/termination_test.c tests/util.c tests/util.h)
target_link_libraries(termination_test PRIVATE samplerate)
add_android_test(termination_test)

add_executable(callback_hang_test tests/callback_hang_test.c tests/util.c tests/util.h)
target_link_libraries(callback_hang_test PRIVATE samplerate)
add_android_test(callback_hang_test)

add_executable(downsample_test tests/downsample_test.c tests/util.c tests/util.h)
target_link_libraries(downsample_test PRIVATE samplerate)
add_android_test(downsample_test)

add_executable(simple_test tests/simple_test.c tests/util.c tests/util.h)
target_link_libraries(simple_test PRIVATE samplerate)
add_android_test(simple_test)

add_executable(callback_test tests/callback_test.c tests/util.c tests/util.h)
target_link_libraries(callback_test PRIVATE samplerate)
add_android_test(callback_test)

add_executable(reset_test tests/reset_test.c tests/util.c tests/util.h)
target_link_libraries(reset_test PRIVATE samplerate)
add_android_test(reset_test)

add_executable(clone_test tests/clone_test.c tests/util.c tests/util.h)
target_link_libraries(clone_test PRIVATE samplerate)
add_android_test(clone_test)

add_executable(nullptr_test tests/nullptr_test.c tests/util.c tests/util.h)
target_link_libraries(nullptr_test PRIVATE samplerate)
add_android_test(nullptr_test)

add_executable(multi_channel_test tests/multi_channel_test.c tests/calc_snr.c tests/util.c tests/util.h)
target_link_libraries(multi_channel_test
  PRIVATE
    samplerate
    $<$<BOOL:${FFTW3_FOUND}>:FFTW3::fftw3>
   )
add_android_test(multi_channel_test)

add_executable(varispeed_test tests/varispeed_test.c tests/calc_snr.c tests/util.c tests/util.h)
target_link_libraries(varispeed_test
  PRIVATE samplerate
    $<$<BOOL:${FFTW3_FOUND}>:FFTW3::fftw3>
   )
# add_test(NAME varispeed_test COMMAND varispeed_test util.c util.h WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/src)
add_android_test(varispeed_test)

add_executable(float_short_test tests/float_short_test.c)
target_link_libraries(float_short_test PRIVATE samplerate)
add_android_test(float_short_test)

add_executable(snr_bw_test tests/snr_bw_test.c tests/calc_snr.c tests/util.c tests/util.h)
target_link_libraries(snr_bw_test
  PRIVATE
    samplerate
    $<$<BOOL:${FFTW3_FOUND}>:FFTW3::fftw3>
   )
# add_test(NAME snr_bw_test COMMAND snr_bw_test util.c util.h WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/src)
add_android_test_args(snr_bw_test "--verbose")

add_executable(throughput_test tests/throughput_test.c tests/util.c tests/util.h)
target_link_libraries(throughput_test PRIVATE samplerate)

add_executable(multichan_throughput_test tests/multichan_throughput_test.c tests/util.c tests/util.h)
target_link_libraries(multichan_throughput_test PRIVATE samplerate)

add_executable(src-evaluate tests/src-evaluate.c tests/util.c tests/util.h tests/calc_snr.c)
target_link_libraries(src-evaluate
  PRIVATE
    samplerate
    $<$<BOOL:${FFTW3_FOUND}>:FFTW3::fftw3>
    $<$<BOOL:${SndFile_FOUND}>:${SNDFILE_TARGET}>
   )

set (SAMPLERATE_TEST_TARGETS
    misc_test
    termination_test
    callback_hang_test
    downsample_test
    simple_test
    callback_test
    reset_test
    clone_test
    nullptr_test
    multi_channel_test
    varispeed_test
    float_short_test
    snr_bw_test
    )

set(SAMPLERATE_BENCHMARK_TARGETS
    throughput_test
    multichan_throughput_test
    src-evaluate
    )
   
set_target_properties(${SAMPLERATE_TEST_TARGETS} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "tests")
set_target_properties(${SAMPLERATE_BENCHMARK_TARGETS} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "benchmarks")

#================ Creating archives to be run on devices ================#

set(ARCHIVE_DEPENDENT_LIBS "")
if(BUILD_SHARED_LIBS)
    # Add libsamplerate.so to the list of files to be included in the tarball
    list(APPEND ARCHIVE_DEPENDENT_LIBS "lib/libsamplerate.so")
endif()
message(STATUS "ARCHIVE_DEPENDENT_LIBS: ${ARCHIVE_DEPENDENT_LIBS}")

# For those non unix native like me... The two tar commands below uses --transform options:
# were 's' means substitute, '^' means the beginning of the path, and ',' is the delimiter.
# One transform prepends the archive name to all paths. And in the benchmarks tar command,
# another remove <pattern> from any paths that start with '<pattern>/'.
add_custom_target(create_tarball
    COMMAND tar "cvzf" "${ARCHIVE_NAME}.tar.gz" 
    --transform "s,^,${ARCHIVE_NAME}/," 
    ${ARCHIVE_DEPENDENT_LIBS}
    "tests/"
    "test_wrapper.sh"
    COMMENT "Creating tarball for testsuite"
)

# Benchmarks archive
set(ARCHIVE_BENCHMARK_TEST "")
list(APPEND ARCHIVE_BENCHMARK_TEST "benchmarks/throughput_test;benchmarks/multichan_throughput_test")
message(STATUS "ARCHIVE_BENCHMARK_TEST: ${ARCHIVE_BENCHMARK_TEST}")
# Only include src-evaluate program in the archive if we have libsndfile
if (SndFile_FOUND)
  # Extract the filename from the full path
  get_target_property(SNDFILE_LIBRARY_PATH SndFile::sndfile IMPORTED_LOCATION)
  get_filename_component(SNDFILE_FILENAME ${SNDFILE_LIBRARY_PATH} NAME)
  message(STATUS "SNDFILE_FILENAME: ${SNDFILE_FILENAME}")
    
  # Check if we need to add libsndfile to the tarball
  if(SNDFILE_FILENAME MATCHES "\\.so$")
    # Ensure the directory exists
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib_ext/")
    # Copy libsndfile to lib_ext directory
    file(COPY "${SNDFILE_LIBRARY_PATH}" DESTINATION "${CMAKE_CURRENT_BINARY_DIR}/lib_ext/")
    # Add the lib to the dependency list
    list(APPEND ARCHIVE_DEPENDENT_LIBS "lib_ext/${SNDFILE_FILENAME}")
  endif()
    # Add the program to the bechmarks list
    list(APPEND ARCHIVE_BENCHMARK_TEST "benchmarks/src-evaluate")
    message(STATUS "ARCHIVE_BENCHMARK_TEST: ${ARCHIVE_BENCHMARK_TEST}")
endif()

# Add the benchmarks programs to the benchmarks tarball
# need to transform the path so both libsamplerate and libsndfile end up in <archive_name>/lib/
add_custom_target(create_benchmark_tarball
  COMMAND tar "cvzf" "${BENCHMARK_ARCHIVE_NAME}.tar.gz" 
  --transform "s,^benchmarks/,," 
  --transform "s,^lib_ext/,lib/," 
  --transform "s,^,${BENCHMARK_ARCHIVE_NAME}/," 
  ${ARCHIVE_DEPENDENT_LIBS} 
  ${ARCHIVE_BENCHMARK_TEST} 
  COMMENT "Creating tarball for benchmark suite"
)


